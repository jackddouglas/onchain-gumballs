/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Gumball, GumballInterface } from "../Gumball";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gumballs",
        type: "uint256",
      },
    ],
    name: "addFreshGumballs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getGumballs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumGumballs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506032600081905550610245806100286000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806326a6c5c0146100465780632e111e2314610064578063e61330cd14610080575b600080fd5b61004e61009e565b60405161005b919061010a565b60405180910390f35b61007e60048036038101906100799190610156565b6100a7565b005b6100886100c2565b604051610095919061010a565b60405180910390f35b60008054905090565b806000808282546100b891906101b2565b9250508190555050565b600080600054116100d257600080fd5b6000808154809291906100e4906101e6565b9190505550600054905090565b6000819050919050565b610104816100f1565b82525050565b600060208201905061011f60008301846100fb565b92915050565b600080fd5b610133816100f1565b811461013e57600080fd5b50565b6000813590506101508161012a565b92915050565b60006020828403121561016c5761016b610125565b5b600061017a84828501610141565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101bd826100f1565b91506101c8836100f1565b92508282019050808211156101e0576101df610183565b5b92915050565b60006101f1826100f1565b91506000820361020457610203610183565b5b60018203905091905056fea26469706673582212200cd5c5aee4ef823704072e73d9fe4f562677179c5750c7a199c0a8cb7911065e64736f6c63430008180033";

type GumballConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GumballConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gumball__factory extends ContractFactory {
  constructor(...args: GumballConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Gumball & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Gumball__factory {
    return super.connect(runner) as Gumball__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GumballInterface {
    return new Interface(_abi) as GumballInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Gumball {
    return new Contract(address, _abi, runner) as unknown as Gumball;
  }
}
